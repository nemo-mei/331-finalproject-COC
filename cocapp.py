# -*- coding: utf-8 -*-
"""COCapp

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xA6PyjyISDga3yhdKkgaL3CKdd8Td2T8
"""

import random
import pandas as pd
import streamlit as st

# Define attribute generation function
def roll_attribute(num_dice, sides, multiplier=1):
    return sum(random.randint(1, sides) for _ in range(num_dice)) * multiplier

# Professions data (example based on rules)
professions_data = [
    {
        "Profession": "Accountant",
        "Skill Points Formula": "EDU × 4",
        "Credit Rating Range": "30-70",
        "Key Skills": ["Accounting", "Library Use", "Law", "Listen", "Persuade", "Spot Hidden", "Two personal skills"],
        "Background": "Accountants are meticulous and skilled in financial analysis."
    },
    {
        "Profession": "Actor",
        "Skill Points Formula": "EDU × 2 + APP × 2",
        "Credit Rating Range": "9-40",
        "Key Skills": ["Art (Acting)", "Disguise", "Fighting (Brawl)", "History", "Psychology", "Two social skills"],
        "Background": "Actors are performers who can navigate social and cultural circles."
    },
    {
        "Profession": "Archaeologist",
        "Skill Points Formula": "EDU × 4",
        "Credit Rating Range": "10-40",
        "Key Skills": ["Archaeology", "Appraise", "History", "Language (Other)", "Library Use", "Spot Hidden", "Mechanical Repair", "Navigate"],
        "Background": "Archaeologists study ancient sites and artifacts, often working with museums and universities."
    }
]

# Generate basic attributes for CoC character
def generate_character():
    return {
        "Strength (STR)": roll_attribute(3, 6, 5),
        "Constitution (CON)": roll_attribute(3, 6, 5),
        "Size (SIZ)": roll_attribute(2, 6, 5) + 30,
        "Dexterity (DEX)": roll_attribute(3, 6, 5),
        "Appearance (APP)": roll_attribute(3, 6, 5),
        "Intelligence (INT)": roll_attribute(2, 6, 5) + 30,
        "Power (POW)": roll_attribute(3, 6, 5),
        "Education (EDU)": roll_attribute(2, 6, 5) + 30,
        "Luck": roll_attribute(3, 6, 5),
    }

# Calculate skill points based on formula
def calculate_skill_points(profession, attributes):
    formula = profession["Skill Points Formula"]
    components = formula.split(" + ")
    total_points = 0
    for component in components:
        attr, multiplier = component.split(" × ")
        attr = attr.strip()
        if attr == "EDU":
            attr = "Education (EDU)"
        elif attr == "APP":
            attr = "Appearance (APP)"
        total_points += attributes[attr] * int(multiplier)
    return total_points

# Streamlit interface
def main():
    st.title("Call of Cthulhu Character Creator")

    # Step 1: Input basic character info
    st.header("Step 1: Enter Basic Information")
    name = st.text_input("Name")
    age = st.text_input("Age")
    gender = st.text_input("Gender")
    residence = st.text_input("Residence")
    background = st.text_area("Background/Description")

    if st.button("Proceed to Profession Selection"):
        if not name or not age or not gender or not residence or not background:
            st.error("Please complete all fields before proceeding.")
            return

        # Step 2: Select profession
        st.header("Step 2: Select Profession")
        profession_choice = st.selectbox(
            "Choose your profession:", [p["Profession"] for p in professions_data]
        )
        profession = next(p for p in professions_data if p["Profession"] == profession_choice)

        st.subheader("Profession Details")
        st.write(f"**Skill Points Formula:** {profession['Skill Points Formula']}")
        st.write(f"**Credit Rating Range:** {profession['Credit Rating Range']}")
        st.write(f"**Key Skills:** {', '.join(profession['Key Skills'])}")
        st.write(f"**Background:** {profession['Background']}")

        # Step 3: Generate attributes
        st.header("Step 3: Generate Attributes")
        if st.button("Generate Attributes"):
            attributes = generate_character()
            st.json(attributes)

            # Step 4: Allocate skill points
            skill_points = calculate_skill_points(profession, attributes)
            st.header("Step 4: Allocate Skill Points")
            st.write(f"Total Skill Points Available: {skill_points}")

            allocated_points = {}
            for skill in profession["Key Skills"]:
                allocated_points[skill] = st.slider(
                    f"Allocate points to {skill}", min_value=0, max_value=skill_points
                )
                skill_points -= allocated_points[skill]

            if st.button("Finish Character Creation"):
                st.success("Character Created Successfully!")
                character_sheet = {
                    "Name": name,
                    "Age": age,
                    "Gender": gender,
                    "Residence": residence,
                    "Background": background,
                    "Profession": profession_choice,
                    **attributes,
                    **allocated_points,
                }
                st.subheader("Character Sheet")
                st.json(character_sheet)

if __name__ == "__main__":
    main()